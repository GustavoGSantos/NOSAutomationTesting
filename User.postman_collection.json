{
	"info": {
		"_postman_id": "31bc033c-460c-4076-96ea-0405ac020918",
		"name": "User",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "11359384"
	},
	"item": [
		{
			"name": "Create User",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.globals.set(\"UserName\", \"{{$randomFullName}}\");\r",
							"pm.globals.set(\"UserEmail\", \"{{$randomEmail}}\");\r",
							"pm.globals.set(\"UserGender\", \"male\");\r",
							"pm.globals.set(\"UserStatus\", \"active\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 201', function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test('Response has properties id, name, email, gender, and status', function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData).to.have.property('name');",
							"    pm.expect(jsonData).to.have.property('email');",
							"    pm.expect(jsonData).to.have.property('gender');",
							"    pm.expect(jsonData).to.have.property('status');",
							"});",
							"",
							"pm.test('Id is not null'), function() {",
							"    pm.expect(pm.response.json().id).to.not.null;",
							"}",
							"",
							"pm.test(\"Name is correct\"), function() {",
							"    pm.expect(pm.response.json().name).to.equal(pm.request.toJSON().name);",
							"}",
							"",
							"pm.test(\"Email is correct\"), function() {",
							"    pm.expect(pm.response.json().email).to.equal(pm.request.toJSON().email);",
							"}",
							"",
							"pm.test(\"Gender is correct\"), function() {",
							"    pm.expect(pm.response.json().gender).to.equal(\"male\");",
							"}",
							"",
							"pm.test(\"Status is correct\"), function() {",
							"    pm.expect(pm.response.json().status).to.equal(\"active\");",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "Bearer 3dba84d9619fa681c318a52d5472e97a8aeb4f8c6d3823a40bb020ce7e3b54db",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{UserName}}\", \r\n    \"gender\": \"{{UserGender}}\", \r\n    \"email\": \"{{UserEmail}}\", \r\n    \"status\": \"{{UserStatus}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://gorest.co.in/public/v2/users",
					"protocol": "https",
					"host": [
						"gorest",
						"co",
						"in"
					],
					"path": [
						"public",
						"v2",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function generateRandomEmail() {\r",
							"    var email = \"\";\r",
							"    var possibleChars = \"abcdefghijklmnopqrstuvwxyz0123456789\";\r",
							"    var emailLength = 10;\r",
							"    for (var i = 0; i < emailLength; i++) {\r",
							"        email += possibleChars.charAt(Math.floor(Math.random() * possibleChars.length));\r",
							"    }\r",
							"    email += \"@example.com\";\r",
							"    return email;\r",
							"}\r",
							"\r",
							"var randomEmail = generateRandomEmail();\r",
							"\r",
							"pm.sendRequest({\r",
							"    url: 'https://gorest.co.in/public/v2/users',\r",
							"    method: 'POST',\r",
							"    header: {\r",
							"        'Authorization': `Bearer ${pm.environment.get('token')}`,\r",
							"        'Content-Type': 'application/json'\r",
							"    },\r",
							"    body: {\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify({\r",
							"            name: 'Name Example',\r",
							"            email: randomEmail,\r",
							"            gender: 'male',\r",
							"            status: 'active'\r",
							"        })\r",
							"    }\r",
							"}, function (err, res) {\r",
							"    console.log(\"Error:\", err);\r",
							"    console.log(\"Response:\", res);\r",
							"    if (err) {\r",
							"        console.error(\"Error sending POST request:\", err);\r",
							"    } else {\r",
							"        if (res && res.json()) {\r",
							"            console.log(\"JSON Response:\", res.json());\r",
							"            pm.globals.set('userId', res.json().id);\r",
							"        } else {\r",
							"            console.error(\"Invalid response:\", res);\r",
							"        }\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Response has the required fields - id, name, email, gender, and status', function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('id');\r",
							"    pm.expect(responseData).to.have.property('name');\r",
							"    pm.expect(responseData).to.have.property('email');\r",
							"    pm.expect(responseData).to.have.property('gender');\r",
							"    pm.expect(responseData).to.have.property('status');\r",
							"})\r",
							"\r",
							"pm.test('Email is in a valid format', function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.email).to.be.a('string').and.to.match(/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/);\r",
							"})\r",
							"\r",
							"pm.test('Gender is either \\'male\\' or \\'female\\'', function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.gender).to.be.oneOf([\r",
							"        'male',\r",
							"        'female'\r",
							"    ]);\r",
							"})\r",
							"\r",
							"pm.test('Status is either active or inactive', function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.status).to.be.oneOf([\r",
							"        'active',\r",
							"        'inactive'\r",
							"    ]);\r",
							"})\r",
							"\r",
							"pm.test('Content type is application/json', function () {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://gorest.co.in/public/v2/users/{{userId}}",
					"protocol": "https",
					"host": [
						"gorest",
						"co",
						"in"
					],
					"path": [
						"public",
						"v2",
						"users",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update User Details",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.globals.set(\"UserGender\", \"male\");\r",
							"pm.globals.set(\"UserStatus\", \"active\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('email');\r",
							"    pm.expect(responseData).to.have.property('name');\r",
							"    pm.expect(responseData).to.have.property('status');\r",
							"    pm.expect(responseData).to.have.property('id');\r",
							"    pm.expect(responseData).to.have.property('gender');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Email is in a valid format\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.email).to.be.a('string');\r",
							"  pm.expect(responseData.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Gender is either male or female\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.gender).to.exist.and.to.satisfy((gender) => gender === 'male' || gender === 'female');\r",
							"});\r",
							"\r",
							"pm.test(\"Status is active or inactive\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.status).to.exist.and.to.satisfy((status) => status === 'active' || status === 'inactive');\r",
							"});\r",
							"\r",
							"pm.test('Id is not null'), function() {\r",
							"    pm.expect(pm.response.json().id).to.not.null;\r",
							"}\r",
							"\r",
							"pm.test(\"Name is correct\"), function() {\r",
							"    pm.expect(pm.response.json().name).to.equal(pm.request.toJSON().name);\r",
							"}\r",
							"\r",
							"pm.test(\"Email is correct\"), function() {\r",
							"    pm.expect(pm.response.json().email).to.equal(pm.request.toJSON().email);\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{UserName}}\",\r\n    \"email\": \"{{UserEmail}}\",\r\n    \"status\": \"active\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://gorest.co.in/public/v2/users/6849321",
					"protocol": "https",
					"host": [
						"gorest",
						"co",
						"in"
					],
					"path": [
						"public",
						"v2",
						"users",
						"6849321"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete User",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function generateRandomEmail() {\r",
							"    var email = \"\";\r",
							"    var possibleChars = \"abcdefghijklmnopqrstuvwxyz0123456789\";\r",
							"    var emailLength = 10;\r",
							"    for (var i = 0; i < emailLength; i++) {\r",
							"        email += possibleChars.charAt(Math.floor(Math.random() * possibleChars.length));\r",
							"    }\r",
							"    email += \"@example.com\";\r",
							"    return email;\r",
							"}\r",
							"\r",
							"var randomEmail = generateRandomEmail();\r",
							"\r",
							"pm.sendRequest({\r",
							"    url: 'https://gorest.co.in/public/v2/users',\r",
							"    method: 'POST',\r",
							"    header: {\r",
							"        'Authorization': `Bearer ${pm.environment.get('token')}`,\r",
							"        'Content-Type': 'application/json'\r",
							"    },\r",
							"    body: {\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify({\r",
							"            name: 'Name Example',\r",
							"            email: randomEmail,\r",
							"            gender: 'male',\r",
							"            status: 'active'\r",
							"        })\r",
							"    }\r",
							"}, function (err, res) {\r",
							"    console.log(\"Error:\", err);\r",
							"    console.log(\"Response:\", res);\r",
							"    if (err) {\r",
							"        console.error(\"Error sending POST request:\", err);\r",
							"    } else {\r",
							"        if (res && res.json()) {\r",
							"            console.log(\"JSON Response:\", res.json());\r",
							"            pm.globals.set('userId', res.json().id);\r",
							"        } else {\r",
							"            console.error(\"Invalid response:\", res);\r",
							"        }\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Response status code is 204', function () {\r",
							"    pm.response.to.have.status(204);\r",
							"})\r",
							"\r",
							"pm.test('Response body is empty', function () {\r",
							"    pm.expect(pm.response.text()).to.be.empty;\r",
							"})\r",
							"\r",
							"pm.test('Verify that the user with ID 6849229 has been successfully deleted', function () {\r",
							"    pm.expect(pm.response.code).to.equal(204);\r",
							"})\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://gorest.co.in/public/v2/users/{{userId}}",
					"protocol": "https",
					"host": [
						"gorest",
						"co",
						"in"
					],
					"path": [
						"public",
						"v2",
						"users",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Todos",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Fixed syntax and added a summary",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is a JSON array\", function () {",
							"    pm.expect(pm.response.json()).to.be.an('array');",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"var schema = {",
							"    \"type\": \"object\",",
							"    \"properties\": {",
							"        \"id\": {\"type\": \"integer\"},",
							"        \"user_id\": {\"type\": \"integer\"},",
							"        \"title\": {\"type\": \"string\"},",
							"        \"due_on\": {\"type\": \"string\", \"format\": \"date-time\"},",
							"        \"status\": {\"type\": \"string\", \"enum\": [\"pending\", \"completed\"]}",
							"    },",
							"    \"required\": [\"id\", \"user_id\", \"title\", \"due_on\", \"status\"]",
							"};",
							"",
							"pm.test(\"Validate schema\", function () {",
							"    jsonData.forEach(function(item) {",
							"        pm.expect(item).to.have.jsonSchema(schema);",
							"    });",
							"});",
							"",
							"pm.test(\"Validate all the status are completed\", function () {",
							"    pm.expect(jsonData).to.be.an('array').that.is.not.empty;",
							"    var completedCount = 0; ",
							"    jsonData.forEach(function(item) {",
							"        pm.expect(item.status).to.equal(\"completed\"); ",
							"        if (item.status === \"completed\") {",
							"            completedCount++; ",
							"        }",
							"    });",
							"    pm.expect(completedCount).to.equal(jsonData.length);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://gorest.co.in/public/v2/todos",
					"protocol": "https",
					"host": [
						"gorest",
						"co",
						"in"
					],
					"path": [
						"public",
						"v2",
						"todos"
					]
				}
			},
			"response": []
		}
	]
}